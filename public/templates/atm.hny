from synch import Lock, acquire, release

const N_ACCOUNTS = 2
const N_CUSTOMERS = 2
const N_ATMS = 2
const MAX_BALANCE = 1

accounts = [ { .lock: Lock(), .balance: choose({0..MAX_BALANCE})}
                            for i in {1..N_ACCOUNTS} ]

invariant min(accounts[acct].balance for acct in {0..N_ACCOUNTS-1}) >= 0

def atm_check_balance(acct):    # return the balance on acct
    acquire(?accounts[acct].lock)
    result = accounts[acct].balance
    release(?accounts[acct].lock)

def atm_withdraw(acct, amount): # withdraw amount from acct
    acquire(?accounts[acct].lock)
    accounts[acct].balance -= amount
    result = True              # return success
    release(?accounts[acct].lock)

def customer(atm, acct, amount):
    let bal = atm_check_balance(acct):
        if amount <= bal:
            atm_withdraw(acct, amount)
        
for i in {1..N_ATMS}:
    spawn customer(i, choose({0..N_ACCOUNTS-1}),
                      choose({0..MAX_BALANCE}))
