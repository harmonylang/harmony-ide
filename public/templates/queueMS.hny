from synch import Lock, acquire, release
from alloc import malloc, free

def Queue():
    let dummy = malloc({ .value: (), .next: None }):
        result = { .head: dummy, .tail: dummy, .hdlock: Lock(), .tllock: Lock() }

def put(q, v):
    let node = malloc({ .value: v, .next: None }):
        acquire(?q->tllock)
        q->tail->next = node
        q->tail = node
        release(?q->tllock)

def get(q):
    acquire(?q->hdlock)
    let dummy = q->head
    let node = dummy->next:
        if node == None:
            result = None
        else:
            free(dummy)
            result = node->value
            q->head = node
    release(?q->hdlock)
